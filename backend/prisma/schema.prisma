// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/** === Identidad de usuario + permisos + certificado === */
model User {
  id               String   @id @default(cuid())
  pin              String   @unique 
  passwordHash     String
  role             String   @default("USER")
  firstLoginDone   Boolean  @default(false)

  // X-Road por usuario
  baseUrl          String?
  xRoadInstance    String?
  xRoadMemberClass String?
  xRoadMemberCode  String?
  xRoadSubsystem   String?

  certificate      UserCertificate?
  permissions      UserPermissions?

  // Descubrimiento por usuario
  providers        Provider[]

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  UploadedFile     UploadedFile[]
}

model UserCertificate {
  id            String   @id @default(cuid())
  userId        String   @unique
  p12Encrypted  Bytes
  iv            Bytes
  authTag       Bytes
  fingerprint   String
  subject       String
  notBefore     DateTime
  notAfter      DateTime
  passEncrypted Bytes
  passIv        Bytes
  passAuthTag   Bytes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model UserPermissions {
  id               String   @id @default(cuid())
  userId           String   @unique
  canViewProviders Boolean  @default(true)
  canViewServices  Boolean  @default(true)
  canViewFiles     Boolean  @default(true)
  canDownloadFiles Boolean  @default(true)
  user             User     @relation(fields: [userId], references: [id])
}

/** === Descubrimiento de proveedores/servicios por usuario === */
model Provider {
  id            String   @id @default(cuid())
  userId        String   // <— dueño
  routeVersion  String   // r1/r2/r3 o ''
  xRoadInstance String
  memberClass   String
  memberCode    String
  subsystemCode String?
  displayName   String
  hasServices   Boolean  @default(false)

  services      Service[]
  user          User     @relation(fields: [userId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, routeVersion, xRoadInstance, memberClass, memberCode, subsystemCode])
}

model Service {
  id             String   @id @default(cuid())
  userId         String   // <— dueño
  providerId     String
  serviceCode    String
  serviceVersion String?
  serviceType    String?

  provider       Provider @relation(fields: [providerId], references: [id])
  endpoints      Endpoint[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, providerId, serviceCode])
}

model Endpoint {
  id        String   @id @default(cuid())
  userId    String   // <— dueño
  serviceId String
  method    String
  path      String

  service   Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, serviceId, method, path])
}

model UploadedFile {
  id         String   @id @default(cuid())
  userId     String
  filename   String
  mimetype   String
  size       Int
  path       String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


